// models/Item.js
const mongoose = require('mongoose');
// Slugify no longer needed if you keep the latest pre-save hook from response #56
// const slugify = require('slugify');

// Define common Units of Measure
const UOM_ENUM = ['pcs', 'kg', 'g', 'ltr', 'ml', 'box', 'pack', 'set', 'mtr', 'other'];

const ItemSchema = new mongoose.Schema({
    companyId: { type: mongoose.Schema.Types.ObjectId, ref: 'Company', required: true, index: true },
    warehouseId: { type: mongoose.Schema.Types.ObjectId, ref: 'Warehouse', required: true },
    name: { type: String, required: true, trim: true },
    sku: { type: String, index: true }, // Generated by pre-save hook
    quantity: { type: Number, default: 0, min: 0 },
    description: { type: String, trim: true },
    unitPrice: { type: Number, required: true, min: 0 }, // Cost price
    sellingPrice: { type: Number, required: true, min: 0 }, // Selling price
    mrp: { type: Number, min: 0 }, // <-- ADDED: Maximum Retail Price (Optional)
    hsnCode: { type: String, trim: true }, // <-- ADDED: HSN Code (Optional)
    uom: { // <-- ADDED: Unit of Measure
        type: String,
        required: true,
        enum: UOM_ENUM, // Use predefined list
        default: 'pcs' // Default to pieces
    },
    perishable: { type: Boolean, default: false },
    expiryDate: { type: Date },
    createdDate: { type: Date, default: Date.now },
    lastUpdated: { type: Date, default: Date.now }
});

// Compound index for company-specific SKU uniqueness (keep as is)
ItemSchema.index({ companyId: 1, sku: 1 }, { unique: true });

ItemSchema.pre('save', function(next) {
    if (this.isNew || !this.sku) {
        const baseSku = this.name.trim()
            .toUpperCase()
            .replace(/\s+/g, '/')
            .replace(/[^A-Z0-9/]+/g, '') || 'ITEM';

        const companyCode = this.companyId.toString().slice(-4).toUpperCase();
        const timestamp = Date.now().toString().slice(-6);

        this.sku = `${companyCode}/${baseSku}/${timestamp}`;
    }
    this.lastUpdated = new Date();
    next();
});

module.exports = mongoose.model('Item', ItemSchema);
module.exports.UOM_ENUM = UOM_ENUM;