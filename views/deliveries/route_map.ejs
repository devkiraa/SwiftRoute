<% locals.pageTitle = typeof title !== 'undefined' ? title : 'Optimized Delivery Route' %>

<header class="py-3 px-6 border-b border-gray-200 bg-white shadow-sm flex items-center justify-between">
  <h2 class="text-xl font-semibold text-gray-800"><%= locals.pageTitle %></h2>
  <div class="flex items-center space-x-2">
    <button id="recenter-btn" class="flex items-center space-x-1 bg-green-600 hover:bg-green-700 text-white text-xs font-medium px-3 py-1.5 rounded">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
        <path d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11V5a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0V9h2a1 1 0 100-2h-2z" />
      </svg>
      <span>Recenter</span>
    </button>
    <a href="/deliveries/my" class="flex items-center space-x-1 border border-gray-300 hover:bg-gray-50 text-gray-700 text-xs font-medium px-3 py-1.5 rounded">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
      <span>Back</span>
    </a>
  </div>
</header>

<% if (errorMsg) { %>
  <div class="m-6 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded max-w-4xl mx-auto">
    <strong class="font-bold">Error:</strong> <%= errorMsg %>
  </div>
<% } %>

<section class="p-6 flex-1 grid grid-cols-1 lg:grid-cols-3 gap-6">
  <!-- Map -->
  <div id="route-map" class="lg:col-span-2 h-[calc(100vh-150px)] border rounded-lg overflow-hidden relative">
    <div id="map-loader" class="absolute inset-0 bg-gray-200 bg-opacity-75 flex items-center justify-center z-10">
      <svg class="animate-spin h-10 w-10 text-gray-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8H4z"></path>
      </svg>
    </div>
  </div>

  <!-- Sidebar -->
  <div class="lg:col-span-1 h-[calc(100vh-150px)] overflow-y-auto bg-white border rounded-lg shadow p-4">
    <h3 class="text-lg font-semibold text-gray-700 mb-4">Route Stops</h3>
    <% if (routeLegs && routeLegs.length) { %>
      <ul class="space-y-4">
        <% routeLegs.forEach((leg, idx) => { %>
          <li class="border rounded-lg p-3 bg-gray-50">
            <div class="flex justify-between items-center">
              <div>
                <p class="text-sm font-medium">Stop <%= idx+1 %>: <%- leg.endName %></p>
                <p class="text-xs text-gray-500"><%- leg.endAddress %></p>
              </div>
              <span class="text-xs text-gray-600"><%= (leg.distance/1000).toFixed(2) %> km</span>
            </div>
            <div class="mt-3 grid grid-cols-3 gap-2">
              <button class="col-span-1 flex items-center justify-center bg-blue-600 hover:bg-blue-700 text-white text-xs py-1 rounded start-route-btn"
                data-start='<%= JSON.stringify(leg.startCoords) %>' data-end='<%= JSON.stringify(leg.endCoords) %>'>
                ‚ñ∂Ô∏è Map
              </button>
              <% if (leg.orderId) { %>
                <form method="POST" action="/deliveries/<%= leg.orderId %>/delivered" class="col-span-1">
                  <button type="submit" class="w-full flex items-center justify-center bg-green-600 hover:bg-green-700 text-white text-xs py-1 rounded" onclick="return confirm('Mark delivered?');">
                    ‚úì Delivered
                  </button>
                </form>
                <button class="col-span-1 flex items-center justify-center bg-gray-200 hover:bg-gray-300 text-gray-800 text-xs py-1 rounded"
                  onclick='showOrderItems(<%- JSON.stringify(leg.items||[]) %> , "<%= leg.endName.replace(/"/g,'‚Äô') %>")'>
                  üì¶ Items
                </button>
              <% } %>
            </div>
          </li>
        <% }) %>
      </ul>
    <% } else { %>
      <p class="text-center text-gray-500">No stops available.</p>
    <% } %>
  </div>
</section>

<!-- Items Modal -->
<div id="items-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
  <div class="bg-white rounded-lg shadow-xl w-11/12 max-w-md p-6">
    <div class="flex justify-between items-center mb-4">
      <h4 id="items-modal-title" class="text-lg font-semibold">Items</h4>
      <button id="items-modal-close" class="text-gray-600 hover:text-gray-900">‚úï</button>
    </div>
    <div id="items-modal-body" class="space-y-2 max-h-60 overflow-y-auto text-sm text-gray-700"></div>
    <div class="mt-6 text-right">
      <button id="items-modal-ok" class="px-4 py-1 bg-blue-600 hover:bg-blue-700 text-white text-sm rounded">Close</button>
    </div>
  </div>
</div>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= googleMapsApiKey %>&libraries=geometry&callback=initRouteMap" async defer></script>

<script>
  // Modal logic
  const modal = document.getElementById('items-modal');
  const modalTitle = document.getElementById('items-modal-title');
  const modalBody = document.getElementById('items-modal-body');
  ['items-modal-close','items-modal-ok'].forEach(id=>{
    document.getElementById(id).onclick=()=>modal.classList.add('hidden');
  });
  modal.addEventListener('click', e=>{ if(e.target===modal) modal.classList.add('hidden'); });
  function showOrderItems(items, dest){
    modalTitle.textContent = `Items @ ${dest}`;
    modalBody.innerHTML = items.length
      ? items.map(it=>`<p>‚Ä¢ ${it.quantity} √ó ${it.name}</p>`).join('')
      : '<p class="italic text-gray-500">No items</p>';
    modal.classList.remove('hidden');
  }
</script>

<script>
  let map, legPolyline, vehicleMarker, lastPos;
  const loader = document.getElementById('map-loader');
  document.getElementById('recenter-btn').onclick = ()=> lastPos && map.panTo(lastPos);

  function initRouteMap(){
    map = new google.maps.Map(document.getElementById('route-map'),{ center:{lat:12.9716,lng:77.5946},zoom:12, mapTypeControl:false,fullscreenControl:false });
    loader.style.display='none';
    vehicleMarker = new google.maps.Marker({ map, icon:{path:google.maps.SymbolPath.FORWARD_CLOSED_ARROW,scale:6,fillColor:'#F00',fillOpacity:1,strokeWeight:1,strokeColor:'#FFF'} });
    navigator.geolocation.watchPosition(p=>{ lastPos={lat:p.coords.latitude,lng:p.coords.longitude}; vehicleMarker.setPosition(lastPos); },console.error,{enableHighAccuracy:true});
    document.querySelectorAll('.start-route-btn').forEach(b=>b.onclick=()=>loadLeg(b));
  }
  async function loadLeg(btn){ if(legPolyline)legPolyline.setMap(null); loader.style.display='flex';
    const s=JSON.parse(btn.dataset.start),e=JSON.parse(btn.dataset.end);
    try{ const r=await fetch(`https://router.project-osrm.org/route/v1/driving/${s.lng},${s.lat};${e.lng},${e.lat}?overview=full&geometries=polyline`);
      const d=await r.json(); if(d.code!=='Ok')throw''; const path=google.maps.geometry.encoding.decodePath(d.routes[0].geometry);
      legPolyline=new google.maps.Polyline({path,map,strokeWeight:6,strokeOpacity:0.8});
      const bounds=new google.maps.LatLngBounds();path.forEach(pt=>bounds.extend(pt));map.fitBounds(bounds);
    }catch(err){console.error(err);alert('Route load failed.');}
    finally{loader.style.display='none';}
  }
</script>
