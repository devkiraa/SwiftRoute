<% locals.pageTitle = typeof title !== 'undefined' ? title : 'Optimized Delivery Route' %>

<header class="py-3 px-6 border-b border-gray-200 bg-white shadow-sm flex-shrink-0">
     <div class="flex items-center justify-between">
         <h2 class="text-lg font-semibold text-gray-800"><%= locals.pageTitle %></h2>
         <div>
             <a href="/deliveries/my" class="inline-block px-3 py-1.5 border border-gray-300 text-xs font-medium text-gray-700 rounded-md hover:bg-gray-50">
                 Back to List
             </a>
         </div>
     </div>
</header>

<%# Display errors from routing API if any %>
<% if (typeof errorMsg !== 'undefined' && errorMsg) { %>
    <div class="m-6 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative max-w-4xl mx-auto" role="alert">
        <strong class="font-bold">Routing Error!</strong>
        <span class="block sm:inline"><%= errorMsg %></span>
    </div>
<% } %>

<section class="p-6 flex-1 grid grid-cols-1 lg:grid-cols-3 gap-6 overflow-hidden">

     <%# Map Area %>
     <div class="lg:col-span-2 h-[calc(100vh-150px)]">
        <div id="route-map" class="w-full h-full border rounded-lg bg-gray-200 text-gray-500 flex items-center justify-center relative">
             <%# Loading Indicator %>
             <div id="map-loader" class="absolute inset-0 bg-gray-200 bg-opacity-75 flex items-center justify-center z-10">
                 <svg class="animate-spin h-8 w-8 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
                 <span class="ml-3">Loading Map & Route...</span>
             </div>
        </div>
     </div>

    <%# Delivery List / Route Steps Area - NOW DISPLAYS LEGS %>
    <div class="lg:col-span-1 h-[calc(100vh-150px)] overflow-y-auto bg-white border rounded-lg shadow-sm p-4 space-y-3">
         <h3 class="text-base font-semibold text-gray-700 border-b pb-2 mb-3">Optimized Route Legs</h3>
          <%# Use the 'routeLegs' array passed from the backend %>
          <% if (typeof routeLegs !== 'undefined' && routeLegs && routeLegs.length > 0) { %>
                <% routeLegs.forEach((leg, index) => { %>
                    <div class="border p-3 rounded-md bg-gray-50">
                        <div class="flex items-start space-x-3">
                             <span class="inline-block flex-shrink-0 bg-blue-600 text-white rounded-full w-6 h-6 text-sm text-center leading-6 font-medium mt-0.5"><%= index + 1 %></span>
                             <div class="flex-1">
                                 <p class="font-semibold text-sm text-gray-900 mb-0.5">
                                     From: <%= leg.startName %>
                                 </p>
                                 <p class="text-xs text-gray-600 mb-1"><%= leg.startAddress %></p>
                                 <p class="font-semibold text-sm text-gray-900 mb-0.5 mt-2 border-t pt-2">
                                     To: <%= leg.endName %>
                                 </p>
                                 <p class="text-xs text-gray-700 leading-tight"><%= leg.endAddress %></p>
                                 <p class="text-xs text-gray-500 mt-1">
                                     Distance: <%= leg.distance || 'N/A' %> | Duration: <%= leg.duration || 'N/A' %>
                                 </p>
                                 <%# Add link to order details if this leg corresponds to an order %>
                                 <% if (leg.orderId) { %>
                                    <div class="mt-2 flex items-center space-x-3">
                                        <a href="/orders/<%= leg.orderId %>" class="text-blue-600 hover:underline text-xs">View Order Details</a>
                                        <%# Find the order to display action buttons %>
                                        <% const legOrder = orders.find(o => o._id.toString() === leg.orderId.toString()); %>
                                        <% if (legOrder) { %>
                                             <% if(legOrder.orderStatus === 'confirmed') { %> <form action="/deliveries/<%= legOrder._id %>/pickup" method="POST" class="inline" onsubmit="..."> <button type="submit" class="text-orange-600 ...">Mark Picked Up</button> </form> <% } else if (legOrder.orderStatus === 'shipped') { %> <form action="/deliveries/<%= legOrder._id %>/delivered" method="POST" class="inline" onsubmit="..."> <button type="submit" class="text-green-600 ...">Mark Delivered</button> </form> <% } %>
                                        <% } %>
                                    </div>
                                 <% } %>
                             </div>
                         </div>
                    </div>
                <% }) %>
          <% } else if (typeof orders !== 'undefined' && orders && orders.length > 0) { %>
                <p class="text-sm text-gray-500 text-center py-4">Could not calculate route legs. Displaying stops:</p>
                <%# Fallback: Show original orders list if legs fail but orders exist %>
                 <% orders.forEach((order, index) => { %>
                    <div class="border p-3 rounded-md bg-gray-100"> <%# Different bg %>
                        <p class="font-medium text-sm text-gray-800 mb-1">Stop <%= index + 1 %>: <%= order.customerName || order.storeId?.storeName %></p>
                        <p class="text-xs text-gray-600"><%= order.shippingAddress %></p>
                    </div>
                 <% }) %>
          <% } else { %>
                <p class="text-sm text-gray-500 text-center py-4">No deliveries assigned or valid for routing.</p>
          <% } %>
    </div>
</section>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= typeof googleMapsApiKey !== 'undefined' ? googleMapsApiKey : '' %>&libraries=geometry,marker&callback=initRouteMap" async defer></script>

<script>
    let map;
    const loader = document.getElementById('map-loader');
    const mapDiv = document.getElementById('route-map');

    // Safely get data passed from server
    const rawRoutePolyline =      '<%= typeof routePolyline !== "undefined" ? JSON.stringify(routePolyline) : "null" %>';
    const rawAssignedOrders =     '<%= typeof orders !== "undefined" ? JSON.stringify(orders) : "[]" %>'; // These are REORDERED by backend
    const rawOriginWarehouse =    '<%= typeof originWarehouse !== "undefined" ? JSON.stringify(originWarehouse) : "null" %>';

    let routePolyline = null;
    let ordersList = [];
    let originDetails = null;

    function parseServerData() { /* ... Keep implementation ... */ }

    async function initRouteMap() {
        console.log("Attempting initRouteMap()...");
        if (!parseServerData()) { return; }

        try {
            if (!google?.maps?.Map) { throw new Error("Maps API not loaded."); } // Simplified check

            const { Map, InfoWindow, LatLngBounds, Polyline } = await google.maps.importLibrary("maps");
            const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
            const { encoding } = await google.maps.importLibrary("geometry");
            console.log("Route Map Libraries Loaded");

            let mapCenter = { lat: 12.9716, lng: 77.5946 };
            // Calculate center based on origin or first order
            if (originDetails?.location?.coordinates) { /* ... set mapCenter ... */ }
            else if (ordersList[0]?.shippingLocation?.coordinates) { /* ... set mapCenter ... */ }
            console.log("Map Center:", mapCenter);

            map = new Map(mapDiv, { /* ... map options ... */ });
            if(loader) loader.style.display = 'none';
            console.log("Map initialized.");

            const bounds = new google.maps.LatLngBounds();

            // Add Origin Marker (Keep logic)
            if (originDetails?.location?.coordinates) { /* ... */ }

            // Add Destination Markers using ordersList (already optimized order)
            if (ordersList?.length > 0) {
                 ordersList.forEach((order, index) => {
                    // ... (Keep logic to find destLat/destLng) ...
                    if (!isNaN(destLat) && !isNaN(destLng)) {
                         const pos = { lat: destLat, lng: destLng };
                         // Use index + 1 for the stop number from the optimized list
                         const marker = new AdvancedMarkerElement({ /* ... content: buildMarkerContent(index + 1) ... */ });
                         // ... Add InfoWindow ...
                         bounds.extend(pos);
                     }
                 });
                 console.log(`Added ${ordersList.length} destination markers.`);
             }

            // Draw **OVERVIEW** Polyline using the single string passed
            if (routePolyline) {
                console.log("Drawing overview route polyline...");
                try {
                    const decodedPath = encoding.decodePath(routePolyline);
                    new Polyline({ path: decodedPath, map: map, /* ... styles ... */ });
                    console.log("Route polyline drawn.");
                } catch (polyError) { console.error("Error drawing polyline:", polyError); }
            } else { console.log("Route polyline not available."); }

            // Fit Map (Keep logic)
            if (ordersList.length > 0 && !bounds.isEmpty()) { /* ... */ }
            else if (ordersList.length === 0) { /* ... */ }
            else { /* ... */ }

        } catch (err) { /* ... error handling ... */ }
    } // End initRouteMap

    function buildMarkerContent(stopNumber) { /* ... Keep implementation ... */ }

</script>