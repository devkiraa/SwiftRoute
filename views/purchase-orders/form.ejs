<% locals.pageTitle = typeof title !== 'undefined' ? title : (isEditing ? 'Edit Purchase Order' : 'Create Purchase Order'); %>
<% const isEditing = typeof po !== 'undefined' && po && po._id; %>
<% const currentFormData = typeof formData === 'object' && formData !== null ? formData : {}; %>
<% const currentPOData = typeof po === 'object' && po !== null ? po : {}; %>
<% const supplierList = Array.isArray(suppliers) ? suppliers : []; %>
<% const warehouseList = Array.isArray(warehouses) ? warehouses : []; %>
<% const itemList = Array.isArray(items) ? items : []; %> <%# Full item list initially %>

<% const getValue = (fieldPath, defaultValue = '') => { /* ... Paste getValue helper from response #77 ... */ } %>

<header class="py-3 px-6 border-b border-gray-200 bg-white shadow-sm flex-shrink-0">
    <div class="flex items-center justify-between">
        <h2 class="text-lg font-semibold text-gray-800"><%= locals.pageTitle %></h2>
        <a href="/purchase-orders" class="inline-block px-3 py-1.5 border border-gray-300 text-xs font-medium text-gray-700 rounded-md hover:bg-gray-50">Cancel</a>
    </div>
</header>

<section class="p-6 flex-1 overflow-y-auto">
    <div class="max-w-4xl mx-auto">
        <% if (typeof error === 'string' && error && error.trim() !== '') { %>
            <div class="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md relative" role="alert">
                <strong class="font-bold">Error: </strong> <span class="block sm:inline"><%= error %></span>
            </div>
        <% } %>

        <form action="<%= isEditing ? '/purchase-orders/' + currentPOData._id + '?_method=PUT' : '/purchase-orders' %>" method="POST" id="po-form" class="bg-white p-6 border rounded-lg shadow-sm space-y-6">

            <div class="grid grid-cols-1 md:grid-cols-3 gap-5">
                <div>
                    <label for="supplierId" class="block text-sm font-medium text-gray-700 mb-1">Supplier <span class="text-red-500">*</span></label>
                    <select id="supplierId" name="supplierId" required class="mt-1 block w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm sm:text-sm">
                        <option value="">-- Select Supplier --</option>
                        <% supplierList.forEach(sup => { %>
                            <% const valToCompare = typeof currentFormData.supplierId !== 'undefined' ? currentFormData.supplierId : currentPOData.supplierId; %>
                            <option value="<%= sup._id %>" <%= (String(valToCompare) === sup._id.toString()) ? 'selected' : '' %>><%= sup.supplierName %></option>
                        <% }); %>
                    </select>
                </div>
                 <div>
                    <label for="warehouseId" class="block text-sm font-medium text-gray-700 mb-1">Deliver To Warehouse <span class="text-red-500">*</span></label>
                    <select id="warehouseId" name="warehouseId" required class="mt-1 block w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm sm:text-sm">
                        <option value="">-- Select Warehouse --</option>
                         <% warehouseList.forEach(wh => { %>
                            <% const valToCompare = typeof currentFormData.warehouseId !== 'undefined' ? currentFormData.warehouseId : currentPOData.warehouseId; %>
                            <option value="<%= wh._id %>" <%= (String(valToCompare) === wh._id.toString()) ? 'selected' : '' %>><%= wh.name %></option>
                        <% }); %>
                    </select>
                </div>
                 <div>
                    <label for="expectedDeliveryDate" class="block text-sm font-medium text-gray-700 mb-1">Expected Delivery</label>
                    <input type="date" id="expectedDeliveryDate" name="expectedDeliveryDate" 
                           value="<%= typeof currentFormData.expectedDeliveryDate !== 'undefined' ? currentFormData.expectedDeliveryDate : (currentPOData.expectedDeliveryDate ? new Date(currentPOData.expectedDeliveryDate).toISOString().split('T')[0] : '') %>" 
                           class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md sm:text-sm">
                </div>
            </div>

            <fieldset class="border p-3 rounded">
                <legend class="text-sm font-medium px-1">Items to Order</legend>
                <div id="po-items-container" class="space-y-3 mt-2">
                     <%# Determine initial items (from formData on error, or from PO data if editing, or one empty row if new) %>
                     <% let itemsToShow = []; %>
                     <% if (currentFormData.itemIds && currentFormData.orderedQuantities && currentFormData.unitCosts) {
                            itemsToShow = currentFormData.itemIds.map((id, index) => ({ 
                                itemId: id, 
                                orderedQuantity: currentFormData.orderedQuantities[index], 
                                unitCost: currentFormData.unitCosts[index] 
                            }));
                        } else if (isEditing && currentPOData.items) {
                             itemsToShow = currentPOData.items;
                        } 
                     %>

                     <% if (itemsToShow && itemsToShow.length > 0) { %>
                        <% itemsToShow.forEach((poItem, index) => { %>
                            <div class="flex items-end space-x-2 po-item-row">
                                <div class="flex-grow" style="flex-basis: 40%;"> 
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Item <span class="text-red-500">*</span></label> 
                                    <select name="itemIds[]" required class="item-select mt-1 block w-full px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm bg-white"> 
                                        <option value="">-- Select Item --</option>
                                        <% itemList.forEach(item => { %> 
                                            <% const itemValue = item._id.toString(); %>
                                            <% const selectedItemId = poItem.itemId?._id?.toString() || String(poItem.itemId || ''); %>
                                            <option value="<%= itemValue %>" 
                                                    data-sku="<%= item.sku %>" 
                                                    data-cost="<%= item.unitCost %>" <%# Maybe use last known cost? %>
                                                    <%= itemValue === selectedItemId ? 'selected' : '' %>>
                                                <%= item.name %> (<%= item.sku %>)
                                            </option> 
                                        <% }); %>
                                    </select> 
                                </div>
                                <div class="w-24"> 
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Order Qty <span class="text-red-500">*</span></label> 
                                    <input type="number" name="orderedQuantities[]" value="<%= poItem.orderedQuantity || 1 %>" required min="1" class="item-quantity mt-1 block w-full px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm"> 
                                </div>
                                 <div class="w-28"> 
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Unit Cost (₹)<span class="text-red-500">*</span></label> 
                                    <input type="number" name="unitCosts[]" value="<%= poItem.unitCost !== undefined ? poItem.unitCost : '' %>" required min="0" step="0.01" placeholder="Cost/unit" class="item-cost mt-1 block w-full px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm"> 
                                </div>
                                <button type="button" class="remove-item-btn px-2 py-1.5 border border-red-300 text-red-600 hover:bg-red-50 rounded-md text-xs" onclick="removeItemRow(this)">Remove</button>
                            </div>
                        <% }); %>
                    <% } else { %>
                         <%# Default empty row for new PO %>
                         <div class="flex items-end space-x-2 po-item-row">
                             <div class="flex-grow" style="flex-basis: 40%;"> <label class="block text-xs font-medium text-gray-700 mb-1">Item <span class="text-red-500">*</span></label> <select name="itemIds[]" required class="item-select mt-1 block w-full px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm bg-white"> <option value="">-- Select Item --</option> <% itemList.forEach(item => { %> <option value="<%= item._id %>" data-sku="<%= item.sku %>" data-cost="<%= item.unitCost %>"><%= item.name %> (<%= item.sku %>)</option> <% }); %> </select> </div>
                             <div class="w-24"> <label class="block text-xs font-medium text-gray-700 mb-1">Order Qty <span class="text-red-500">*</span></label> <input type="number" name="orderedQuantities[]" value="1" required min="1" class="item-quantity mt-1 block w-full px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm"> </div>
                             <div class="w-28"> <label class="block text-xs font-medium text-gray-700 mb-1">Unit Cost (₹)<span class="text-red-500">*</span></label> <input type="number" name="unitCosts[]" value="" required min="0" step="0.01" placeholder="Cost/unit" class="item-cost mt-1 block w-full px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm"> </div>
                             <button type="button" class="remove-item-btn px-2 py-1.5 border border-red-300 text-red-600 hover:bg-red-50 rounded-md text-xs" onclick="removeItemRow(this)">Remove</button>
                        </div>
                    <% } %>
                </div>
                 <button type="button" id="add-po-item-btn" class="mt-3 px-3 py-1.5 border border-dashed border-gray-400 text-gray-600 hover:bg-gray-100 text-sm rounded-md">
                     + Add PO Item
                 </button>
            </fieldset>
            
            <div>
                <label for="notes" class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                <textarea id="notes" name="notes" rows="3" placeholder="Optional notes for this purchase order..."
                          class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm sm:text-sm"><%= getValue('notes') %></textarea>
            </div>


            <div class="mt-6 pt-5 border-t border-gray-200 flex justify-end">
                <a href="/purchase-orders" class="px-4 py-2 border border-gray-300 text-sm font-medium text-gray-700 rounded-md hover:bg-gray-50 mr-3">Cancel</a>
                <button type="submit" class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700">
                    <%= isEditing ? 'Update Purchase Order' : 'Create Purchase Order' %>
                </button>
            </div>
        </form>
    </div>
</section>

<%# Client-side JS for dynamic PO items %>
<script>
    const availableItemsForPO = <%- JSON.stringify(itemList || []) %>;
    
    function createPOItemOptionsHtml() {
        let optionsHtml = '<option value="">-- Select Item --</option>';
        availableItemsForPO.forEach(item => {
             optionsHtml += `<option value="${item._id}" data-sku="${item.sku}" data-cost="${item.unitCost || ''}">`; // Use unitCost if available
             optionsHtml += `${item.name} (${item.sku})`;
             optionsHtml += `</option>`;
        });
        return optionsHtml;
    }

    function addPOItemRow() {
        const container = document.getElementById('po-items-container');
        const newItemRow = document.createElement('div');
        newItemRow.className = 'flex items-end space-x-2 po-item-row';
        newItemRow.innerHTML = `
            <div class="flex-grow" style="flex-basis: 40%;"> 
                <label class="block text-xs font-medium text-gray-700 mb-1">Item <span class="text-red-500">*</span></label> 
                <select name="itemIds[]" required class="item-select mt-1 block w-full px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm bg-white"> 
                    ${createPOItemOptionsHtml()}
                </select> 
            </div>
            <div class="w-24"> 
                <label class="block text-xs font-medium text-gray-700 mb-1">Order Qty <span class="text-red-500">*</span></label> 
                <input type="number" name="orderedQuantities[]" value="1" required min="1" class="item-quantity mt-1 block w-full px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm"> 
            </div>
             <div class="w-28"> 
                <label class="block text-xs font-medium text-gray-700 mb-1">Unit Cost (₹)<span class="text-red-500">*</span></label> 
                <input type="number" name="unitCosts[]" value="" required min="0" step="0.01" placeholder="Cost/unit" class="item-cost mt-1 block w-full px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm"> 
            </div>
            <button type="button" class="remove-item-btn px-2 py-1.5 border border-red-300 text-red-600 hover:bg-red-50 rounded-md text-xs" onclick="removeItemRow(this)">Remove</button>
        `;
        container.appendChild(newItemRow);
         // Add event listener to the new select element
        const newSelect = newItemRow.querySelector('.item-select');
        if (newSelect) {
            newSelect.addEventListener('change', handleItemSelection);
        }
    }

    function removeItemRow(button) {
        const row = button.closest('.po-item-row');
        const container = document.getElementById('po-items-container');
         if (container.querySelectorAll('.po-item-row').length > 1) {
             row.remove();
         } else {
            alert("A purchase order must have at least one item.");
         }
    }
    
    // Function to pre-fill cost when item is selected
    function handleItemSelection(event) {
         if (event.target.classList.contains('item-select')) {
            const selectedOption = event.target.selectedOptions[0];
            const cost = selectedOption.getAttribute('data-cost');
            const costInput = event.target.closest('.po-item-row').querySelector('.item-cost');
            if (cost && costInput) {
                costInput.value = parseFloat(cost).toFixed(2);
            } else if (costInput) {
                costInput.value = ''; // Clear if no cost data
            }
        }
    }

    document.getElementById('add-po-item-btn').addEventListener('click', addPOItemRow);
    
    // Add initial listeners for existing rows on edit
    document.querySelectorAll('#po-items-container .item-select').forEach(select => {
        select.addEventListener('change', handleItemSelection);
    });
     // Add listener to container for dynamically added rows
    document.getElementById('po-items-container').addEventListener('change', handleItemSelection);

</script>