<% locals.pageTitle = typeof title !== 'undefined' ? title : 'Edit Order' %>
<% const isEditing = true; %> 
<%# Make sure variables passed from route exist and are objects/arrays %>
<% const currentOrderData = typeof order === 'object' && order !== null ? order : { _id: null, orderItems: [] }; %>
<% const currentFormData = typeof formData === 'object' && formData !== null ? formData : {}; %>
<%# 'items' passed from route contains items available in the order's warehouse %>
<% const availableItemsForDropdown = Array.isArray(items) ? items : []; %> 

<header class="py-3 px-6 border-b border-gray-200 bg-white shadow-sm flex-shrink-0">
    <div class="flex items-center justify-between">
        <h2 class="text-lg font-semibold text-gray-800">
            <%= locals.pageTitle %> (<%= currentOrderData._id?.toString().slice(-8) || 'New' %>)
        </h2>
        <a href="/orders/<%= currentOrderData._id %>" class="inline-block px-3 py-1.5 border border-gray-300 text-xs font-medium text-gray-700 rounded-md hover:bg-gray-50">
            Cancel Edit
        </a>
    </div>
</header>

<section class="p-6 flex-1 overflow-y-auto">
    <div class="max-w-4xl mx-auto">

        <% if (typeof error === 'string' && error && error.trim() !== '') { %>
            <div class="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md relative" role="alert">
                <strong class="font-bold">Error: </strong> <span class="block sm:inline"><%= error %></span>
            </div>
        <% } %>

        <form action="/orders/<%= currentOrderData._id %>?_method=PUT" method="POST" id="order-form" class="bg-white p-6 border rounded-lg shadow-sm space-y-6">

            <%# --- Store and Warehouse Selection (Read Only) --- %>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Target Store</label>
                    <input type="text" value="<%= currentOrderData.storeId?.storeName || 'N/A' %>" disabled 
                           class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100 cursor-not-allowed sm:text-sm">
                    <input type="hidden" name="storeId" value="<%= currentOrderData.storeId?._id %>"> <%# Still need to submit IDs %>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Fulfilling Warehouse</label>
                     <input type="text" value="<%= currentOrderData.warehouseId?.name || 'N/A' %>" disabled 
                            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100 cursor-not-allowed sm:text-sm">
                    <input type="hidden" name="warehouseId" value="<%= currentOrderData.warehouseId?._id %>"> <%# Still need to submit IDs %>
                </div>
            </div>

            <%# --- Customer Details (Editable) --- %>
            <fieldset class="border p-3 rounded">
                <legend class="text-sm font-medium px-1">Recipient/Customer Info</legend>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-2">
                    <div>
                        <label for="customerName" class="block text-xs font-medium text-gray-700 mb-1">Recipient Name <span class="text-red-500">*</span></label>
                        <input type="text" id="customerName" name="customerName" 
                               value="<%= typeof currentFormData.customerName !== 'undefined' ? currentFormData.customerName : (currentOrderData.customerName || '') %>" 
                               required class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm sm:text-sm">
                    </div>
                    <div>
                        <label for="customerPhone" class="block text-xs font-medium text-gray-700 mb-1">Recipient Phone</label>
                        <input type="tel" id="customerPhone" name="customerPhone" 
                               value="<%= typeof currentFormData.customerPhone !== 'undefined' ? currentFormData.customerPhone : (currentOrderData.customerPhone || '') %>" 
                               class="block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm sm:text-sm">
                    </div>
                </div>
            </fieldset>

            <%# --- Order Items (Editable) --- %>
            <fieldset class="border p-3 rounded">
                <legend class="text-sm font-medium px-1">Order Items</legend>
                <div id="order-items-container" class="space-y-3 mt-2">
                    <%# Determine which items to display initially: Use formData if available (error case), otherwise use original order data %>
                    <% const itemsToShow = (Array.isArray(currentFormData.itemIds) && Array.isArray(currentFormData.quantities)) 
                                          ? currentFormData.itemIds.map((id, index) => ({ itemId: id, quantity: currentFormData.quantities[index] })) 
                                          : currentOrderData.orderItems; 
                    %>

                    <% if (itemsToShow && itemsToShow.length > 0) { %>
                        <% itemsToShow.forEach((orderItem, index) => { %>
                            <%# Find full details of the item being shown (either from original order or available list) %>
                            <% const currentItemDetails = availableItemsForDropdown.find(i => i._id.toString() === (orderItem.itemId?._id?.toString() || String(orderItem.itemId || ''))) || orderItem.itemId; %>
                            <div class="flex items-end space-x-2 order-item-row">
                                <div class="flex-grow"> 
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Item <span class="text-red-500">*</span></label> 
                                    <select name="itemIds[]" required class="item-select mt-1 block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-white"> 
                                        <option value="">-- Select Item --</option>
                                        <% availableItemsForDropdown.forEach(item => { %> 
                                            <% const itemValue = item._id.toString(); %>
                                            <% const selectedItemId = currentItemDetails?._id?.toString() || ''; %>
                                            <option value="<%= itemValue %>" 
                                                    data-price="<%= item.sellingPrice %>" 
                                                    data-sku="<%= item.sku %>" 
                                                    data-stock="<%= item.quantity %>" 
                                                    data-warehouse="<%= item.warehouseId?.name || 'N/A' %>"
                                                    <%= itemValue === selectedItemId ? 'selected' : '' %>>
                                                <%= item.name %> (<%= item.sku %>) - Stock: <%= item.quantity %>
                                            </option> 
                                        <% }); %>
                                    </select> 
                                </div>
                                <div class="w-24"> 
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Quantity <span class="text-red-500">*</span></label> 
                                    <input type="number" name="quantities[]" value="<%= orderItem.quantity || 1 %>" required min="1" 
                                           class="item-quantity mt-1 block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm sm:text-sm"> 
                                </div>
                                <button type="button" class="remove-item-btn px-2 py-1.5 border border-red-300 text-red-600 hover:bg-red-50 rounded-md text-xs" onclick="removeItemRow(this)">Remove</button>
                            </div>
                        <% }); %>
                    <% } else { %>
                         <%# Provide at least one empty row if order has no items initially (shouldn't happen ideally) or if formData clears items %>
                         <div class="flex items-end space-x-2 order-item-row">
                            <div class="flex-grow"> <label class="block text-xs font-medium text-gray-700 mb-1">Item <span class="text-red-500">*</span></label> <select name="itemIds[]" required class="item-select mt-1 block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-white"> <option value="">-- Select Item --</option> <% availableItemsForDropdown.forEach(item => { %> <option value="<%= item._id %>" data-price="<%= item.sellingPrice %>" data-sku="<%= item.sku %>" data-stock="<%= item.quantity %>" data-warehouse="<%= item.warehouseId?.name || 'N/A' %>"><%= item.name %> (<%= item.sku %>) - Stock: <%= item.quantity %></option> <% }); %> </select> </div>
                            <div class="w-24"> <label class="block text-xs font-medium text-gray-700 mb-1">Quantity <span class="text-red-500">*</span></label> <input type="number" name="quantities[]" value="1" required min="1" class="item-quantity mt-1 block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm sm:text-sm"> </div>
                            <button type="button" class="remove-item-btn px-2 py-1.5 border border-red-300 text-red-600 hover:bg-red-50 rounded-md text-xs" onclick="removeItemRow(this)">Remove</button>
                        </div>
                    <% } %>
                </div>
                <button type="button" id="add-item-btn" class="mt-3 px-3 py-1.5 border border-dashed border-gray-400 text-gray-600 hover:bg-gray-100 text-sm rounded-md">
                    + Add Another Item
                </button>
            </fieldset>

            <div class="mt-6 pt-5 border-t border-gray-200 flex justify-end">
                <a href="/orders/<%= currentOrderData._id %>" class="px-4 py-2 border border-gray-300 text-sm font-medium text-gray-700 rounded-md hover:bg-gray-50 mr-3">Cancel</a>
                <button type="submit" class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Update Order
                </button>
            </div>
        </form>
    </div>
</section>

<%# Client-side JS for dynamic items (Keep script from create form) %>
<script>
    // Pass available items (scoped to warehouse) data from server to client-side JS
    const availableItems = <%- JSON.stringify(availableItemsForDropdown || []) %>;
    
    function createItemOptionsHtml() {
        let optionsHtml = '<option value="">-- Select Item --</option>';
        availableItems.forEach(item => {
             // Use sellingPrice here as that's what the order total is based on
             optionsHtml += `<option value="${item._id}" data-price="${item.sellingPrice}" data-sku="${item.sku}" data-stock="${item.quantity}" data-warehouse="${item.warehouseId?.name || 'N/A'}">`;
             optionsHtml += `${item.name} (${item.sku}) - Stock: ${item.quantity}`; // Show stock
             optionsHtml += `</option>`;
        });
        return optionsHtml;
    }

    function addItemRow() {
        // ... (Keep the addItemRow function as before)
         const container = document.getElementById('order-items-container');
        const newItemRow = document.createElement('div');
        newItemRow.className = 'flex items-end space-x-2 order-item-row';
        newItemRow.innerHTML = `
            <div class="flex-grow"> 
                <label class="block text-xs font-medium text-gray-700 mb-1">Item <span class="text-red-500">*</span></label> 
                <select name="itemIds[]" required class="item-select mt-1 block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-white"> 
                    ${createItemOptionsHtml()}
                </select> 
            </div>
            <div class="w-24"> 
                <label class="block text-xs font-medium text-gray-700 mb-1">Quantity <span class="text-red-500">*</span></label> 
                <input type="number" name="quantities[]" value="1" required min="1" class="item-quantity mt-1 block w-full px-3 py-1.5 border border-gray-300 rounded-md shadow-sm sm:text-sm"> 
            </div>
            <button type="button" class="remove-item-btn px-2 py-1.5 border border-red-300 text-red-600 hover:bg-red-50 rounded-md text-xs" onclick="removeItemRow(this)">Remove</button>
        `;
        container.appendChild(newItemRow);
    }

    function removeItemRow(button) {
        // ... (Keep the removeItemRow function as before)
        const row = button.closest('.order-item-row');
        const container = document.getElementById('order-items-container');
         if (container.querySelectorAll('.order-item-row').length > 1) {
             row.remove();
         } else {
            alert("An order must have at least one item.");
         }
    }

    document.getElementById('add-item-btn').addEventListener('click', addItemRow);

    // Optional: Add client-side stock warnings or quantity limits based on selected item
    document.getElementById('order-items-container').addEventListener('change', function(event) {
        if (event.target.classList.contains('item-select')) {
            const selectedOption = event.target.selectedOptions[0];
            const stock = selectedOption.getAttribute('data-stock');
            const qtyInput = event.target.closest('.order-item-row').querySelector('.item-quantity');
            if (stock !== null && qtyInput) {
                qtyInput.max = stock; // Set max based on stock
                 // Optionally add a visual warning if stock is low
            }
        } else if (event.target.classList.contains('item-quantity')) {
             const maxStock = event.target.max;
             if (maxStock && parseInt(event.target.value) > parseInt(maxStock)) {
                 alert(`Quantity cannot exceed available stock (${maxStock}).`);
                 event.target.value = maxStock;
             }
        }
    });
</script>