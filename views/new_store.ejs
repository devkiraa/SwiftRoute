<%# This variable will be used by the layout for the main heading %>
<% locals.pageTitle = typeof title !== 'undefined' ? title : 'Add New Store' %>

<header class="py-3 px-6 border-b border-gray-200 bg-white shadow-sm flex-shrink-0">
    <div class="flex items-center justify-between">
        <h2 class="text-lg font-semibold text-gray-800"><%= locals.pageTitle %></h2>
        <a href="/stores" class="inline-block px-3 py-1.5 border border-gray-300 text-xs font-medium text-gray-700 rounded-md hover:bg-gray-50">
            Cancel
         </a>
    </div>
</header>

<section class="p-6 flex-1 overflow-y-auto">
    <div class="max-w-4xl mx-auto"> <%# Limit form width %>

        <% if (typeof error !== 'undefined' && error) { %>
        <div class="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
            <strong class="font-bold">Error!</strong>
            <span class="block sm:inline"><%= error %></span>
        </div>
        <% } %>

        <form action="/stores" method="POST" id="store-form" class="bg-white p-6 border rounded-lg shadow-sm">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">

                <div>
                    <h3 class="text-lg font-medium leading-6 text-gray-900 mb-4 border-b pb-2">Store Details</h3>
                    <div class="space-y-4">
                        <div>
                            <label for="storeName" class="block text-sm font-medium text-gray-700 mb-1">Store Name <span class="text-red-500">*</span></label>
                            <input type="text" id="storeName" name="storeName" value="<%= typeof formData !== 'undefined' ? formData.storeName : '' %>" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                        </div>
                         <div>
                            <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone</label>
                            <input type="tel" id="phone" name="phone" value="<%= typeof formData !== 'undefined' ? formData.phone : '' %>" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                        </div>
                         <div>
                            <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                            <input type="email" id="email" name="email" value="<%= typeof formData !== 'undefined' ? formData.email : '' %>" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                        </div>
                        <div>
                            <label for="deliveryWindow" class="block text-sm font-medium text-gray-700 mb-1">Delivery Window</label>
                            <input type="text" id="deliveryWindow" name="deliveryWindow" placeholder="e.g., 9:00-17:00" value="<%= typeof formData !== 'undefined' ? formData.deliveryWindow : '' %>" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                        </div>
                    </div>
                </div>

                <div>
                    <h3 class="text-lg font-medium leading-6 text-gray-900 mb-4 border-b pb-2">Location</h3>
                     <div class="space-y-4">
                        <div>
                             <label for="address-search" class="block text-sm font-medium text-gray-700 mb-1">Search Address</label>
                             <input type="text" id="address-search" placeholder="Start typing address..." class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                             <%# Google Autocomplete will attach here %>
                        </div>
                         <div>
                             <label for="address" class="block text-sm font-medium text-gray-700 mb-1">Full Address (Confirm / Enter Manually) <span class="text-red-500">*</span></label>
                             <input type="text" id="address" name="address" value="<%= typeof formData !== 'undefined' ? formData.address : '' %>" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                         </div>
                        <div>
                             <label class="block text-sm font-medium text-gray-700 mb-1">Select Location on Map</label>
                             <button type="button" id="use-current-location" class="mb-2 inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded shadow-sm text-white bg-gray-600 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                                 <svg class="-ml-0.5 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"> <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd" /> </svg>
                                 Use Current Location
                             </button>
                             <div id="map" class="w-full h-72 rounded-md border border-gray-300 bg-gray-200"></div> <%# Adjusted height %>
                             <input type="hidden" id="latitude" name="latitude" value="<%= typeof formData !== 'undefined' ? formData.latitude : '' %>">
                             <input type="hidden" id="longitude" name="longitude" value="<%= typeof formData !== 'undefined' ? formData.longitude : '' %>">
                             <div id="geolocation-status" class="mt-1 text-xs text-gray-500"></div>
                        </div>
                    </div>
                 </div>
            </div>

            <div class="mt-6 pt-4 border-t border-gray-200 flex justify-end">
                 <a href="/stores" class="px-4 py-2 border border-gray-300 text-sm font-medium text-gray-700 rounded-md hover:bg-gray-50 mr-3">Cancel</a>
                <button type="submit" class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Add Store
                </button>
            </div>
        </form>
    </div>
</section>


<%# -------- Google Maps Script -------- %>
<%# This script tag will likely be moved to the end of the <body> by express-ejs-layouts %>
<%# Ensure googleMapsApiKey is passed from the route %>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= typeof googleMapsApiKey !== 'undefined' ? googleMapsApiKey : '' %>&libraries=places,marker&callback=initializeGoogleMap" async defer></script>

<script>
    // --- ALL the Google Maps JavaScript (initializeGoogleMap, updateLocation, etc.) ---
    // --- goes here, exactly as it was in the previous version. ---
    // Make sure the variable 'googleMapsApiKey' is passed correctly from the route
    // if you reference it within this script block (though it's mainly used in the src attribute above).

    let map;
    let marker;
    let autocomplete;
    let infoWindow;

    const latitudeInput = document.getElementById('latitude');
    const longitudeInput = document.getElementById('longitude');
    const addressInput = document.getElementById('address');
    const searchInput = document.getElementById('address-search');
    const useCurrentLocationButton = document.getElementById('use-current-location');
    const geolocationStatusDiv = document.getElementById('geolocation-status');

    const defaultLocation = { lat: 12.9716, lng: 77.5946 }; // Bangalore
    const defaultZoom = 12;

     async function initializeGoogleMap() {
         try {
             const { Map } = await google.maps.importLibrary("maps");
             const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
             const { InfoWindow } = await google.maps.importLibrary("maps");
             console.log("Google Maps Libraries Loaded");

             map = new Map(document.getElementById("map"), {
                 center: defaultLocation,
                 zoom: defaultZoom,
                 mapId: "SWIFTROUTE_MAP_ID", // Optional: Customize in Google Cloud Console
                 mapTypeControl: false
             });
             console.log("Map Initialized");

             infoWindow = new InfoWindow();
             console.log("InfoWindow Initialized");

             autocomplete = new google.maps.places.Autocomplete(searchInput, {
                  fields: ["formatted_address", "geometry", "name"],
                  componentRestrictions: { country: "in" }
             });
             autocomplete.bindTo("bounds", map);
             console.log("Autocomplete Initialized");

             marker = new AdvancedMarkerElement({
                  map: map,
                  position: null,
                  gmpDraggable: true,
             });
             console.log("Marker Initialized");

             autocomplete.addListener("place_changed", () => { /* ... keep logic ... */ });
             map.addListener("click", (e) => { /* ... keep logic ... */ });
             marker.addListener('dragend', () => { /* ... keep logic ... */ });
             marker.addListener('click', () => { /* ... keep logic ... */ });

             if (latitudeInput.value && longitudeInput.value) { /* ... keep logic ... */ }

         } catch(error) { /* ... keep error handling ... */ }
     }

     function updateLocation(lat, lng, prefilledAddress = null, fetchAddressIfNeeded = false) {
         // ... Keep the full implementation of updateLocation from the previous step ...
         // (including validation, setting inputs, updating marker, centering map, handling InfoWindow and address fetching)
         console.log("updateLocation called with:", { lat, lng, prefilledAddress, fetchAddressIfNeeded });
         if (isNaN(lat) || isNaN(lng)) { return; }
         const newPosition = { lat: lat, lng: lng };
         latitudeInput.value = lat.toFixed(7);
         longitudeInput.value = lng.toFixed(7);
         if (marker) { marker.position = newPosition; marker.map = map; }
         if (map) { map.setCenter(newPosition); map.setZoom(17); }

         let addressToDisplay = prefilledAddress;
         function setInfoWindowContent(address) { /* ... Keep implementation ... */ }

         if (fetchAddressIfNeeded && !prefilledAddress) {
             geolocationStatusDiv.textContent = 'Getting address...'; /* ... */
             fetch(`/stores/api/google/reverse_geocode?lat=${lat}&lng=${lng}`)
                 .then(response => { /* ... */ })
                 .then(data => { /* ... */ setInfoWindowContent(addressToDisplay); /* ... */ })
                 .catch(error => { /* ... */ setInfoWindowContent(null); });
         } else {
              if(prefilledAddress) { addressInput.value = prefilledAddress; /* ... */ }
              setInfoWindowContent(addressToDisplay);
         }
     }

    useCurrentLocationButton.addEventListener('click', () => { /* ... keep logic ... */ });
    searchInput.addEventListener('keydown', (event) => { /* ... keep logic ... */ });

</script>