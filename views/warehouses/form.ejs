<% locals.pageTitle = typeof title !== 'undefined' ? title : (isEditing ? 'Edit Warehouse' : 'Add New Warehouse'); %>
<% const isEditing = typeof warehouse !== 'undefined' && warehouse && warehouse._id; %>
<%# Use formData for repopulating on error, currentWarehouseData for initial display/edit data %>
<% const currentFormData = typeof formData === 'object' && formData !== null ? formData : {}; %>
<% const currentWarehouseData = typeof warehouse === 'object' && warehouse !== null ? warehouse : {}; %>
<% const companyList = Array.isArray(companies) ? companies : []; %>

<%# Simplified getValue helper for this form's structure %>
<% const getValue = (fieldPath, defaultValue = '') => {
    let dataToUse = (Object.keys(currentFormData).length > 0 && !(currentFormData === currentWarehouseData && isEditing)) ? currentFormData : currentWarehouseData;
    const fields = fieldPath.split('.');
    let value = dataToUse;
    try {
        for (const field of fields) {
            if (value && typeof value[field] !== 'undefined' && value[field] !== null) {
                value = value[field];
            } else {
                return defaultValue; // Path not fully found in dataToUse
            }
        }
        return (value !== null && typeof value !== 'undefined') ? value : defaultValue;
    } catch (e) {
        return defaultValue;
    }
} %>

<header class="py-3 px-6 border-b border-gray-200 bg-white shadow-sm flex-shrink-0">
    <div class="flex items-center justify-between">
        <h2 class="text-lg font-semibold text-gray-800"><%= locals.pageTitle %></h2>
        <a href="/warehouses" class="inline-block px-3 py-1.5 border border-gray-300 text-xs font-medium text-gray-700 rounded-md hover:bg-gray-50">Cancel</a>
    </div>
</header>

<section class="p-6 flex-1 overflow-y-auto">
    <div class="max-w-3xl mx-auto">
        <% if (typeof error === 'string' && error && error.trim() !== '') { %>
            <div class="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md relative" role="alert">
                <strong class="font-bold">Error: </strong> <span class="block sm:inline"><%= error %></span>
                 <button type="button" class="absolute top-0 bottom-0 right-0 px-4 py-3" onclick="this.parentElement.remove();">&times;</button>
            </div>
        <% } %>

        <form action="<%= isEditing ? '/warehouses/' + currentWarehouseData._id + '?_method=PUT' : '/warehouses' %>" method="POST" class="bg-white p-6 border rounded-lg shadow-sm space-y-6">

            <%# Company: Display if editing, Select if admin & new %>
            <% if (locals.loggedInUser.role === 'admin' && !isEditing) { %>
                <div>
                    <label for="companyId" class="block text-sm font-medium text-gray-700 mb-1">Assign to Company <span class="text-red-500">*</span></label>
                    <select id="companyId" name="companyId" required class="mt-1 block w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm sm:text-sm">
                        <option value="">-- Select Company --</option>
                        <% companyList.forEach(comp => { %>
                            <option value="<%= comp._id %>" <%= (getValue('companyId') == comp._id) ? 'selected' : '' %>><%= comp.companyName %></option>
                        <% }); %>
                    </select>
                </div>
            <% } else if (isEditing && currentWarehouseData.companyId) { %>
                 <input type="hidden" name="companyId" value="<%= currentWarehouseData.companyId._id || currentWarehouseData.companyId %>">
                 <div>
                     <label class="block text-sm font-medium text-gray-500 mb-1">Company</label>
                     <p class="mt-1 text-sm text-gray-800 bg-gray-100 px-3 py-2 border rounded-md"><%= currentWarehouseData.companyId?.companyName || '(Not Set)' %></p>
                 </div>
            <% } %>

            <fieldset class="border p-4 rounded-md space-y-4">
                 <legend class="text-base font-medium px-1 text-gray-700">Warehouse Details</legend>
                <div>
                    <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Warehouse Name <span class="text-red-500">*</span></label>
                    <input type="text" id="name" name="name" value="<%= getValue('name') %>" required 
                           class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md sm:text-sm">
                </div>
                <div>
                    <label for="capacity" class="block text-sm font-medium text-gray-700 mb-1">Capacity (e.g., sq ft or units)</label>
                    <input type="number" id="capacity" name="capacity" value="<%= getValue('capacity', '0') %>" min="0"
                           class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md sm:text-sm">
                </div>
            </fieldset>

            <fieldset class="border p-4 rounded-md space-y-4">
                <legend class="text-base font-medium px-1 text-gray-700">Address & Location</legend>
                <%# Your model doesn't have a separate address block, only location. For simplicity, let's add a general address field here for now %>
                <%# You can expand this to street, city, etc. and update your model if needed %>
                <div>
                    <label for="address_full" class="block text-sm font-medium text-gray-700 mb-1">Full Address (for display)</label>
                    <textarea id="address_full" name="address_full" rows="3" placeholder="Enter full warehouse address"
                              class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md sm:text-sm"><%= getValue('address_full') %></textarea> <%# Note: 'address_full' is not in current model, add if needed %>
                </div>
                
                 <div class="mt-4 p-4 border rounded-md bg-gray-50">
                    <label for="address-search" class="block text-sm font-medium text-gray-700 mb-2">Search Address to Set Location:</label>
                    <input id="address-search" type="text" placeholder="Type address and select from suggestions..."
                           class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm sm:text-sm mb-2">
                    <button type="button" id="use-current-location" class="text-xs text-blue-600 hover:underline">Use My Current Location</button>
                    <div id="geolocation-status" class="text-xs text-gray-500 mt-1"></div>
                     <div id="map" style="height: 250px; width: 100%; margin-top: 1rem; border-radius: 0.375rem;"></div>
                 </div>

                 <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mt-2">
                     <div>
                         <label for="coordinates_lat" class="block text-xs font-medium text-gray-700 mb-1">Latitude <span class="text-red-500">*</span></label>
                         <input type="number" step="any" id="coordinates_lat" name="coordinates_lat" 
                                value="<%= getValue('location.coordinates.1', '') %>" <%# Latitude is index 1 %>
                                placeholder="e.g., 12.9716" required
                                class="block w-full px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm">
                     </div>
                     <div>
                         <label for="coordinates_lng" class="block text-xs font-medium text-gray-700 mb-1">Longitude <span class="text-red-500">*</span></label>
                         <input type="number" step="any" id="coordinates_lng" name="coordinates_lng" 
                                value="<%= getValue('location.coordinates.0', '') %>" <%# Longitude is index 0 %>
                                placeholder="e.g., 77.5946" required
                                class="block w-full px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm">
                     </div>
                 </div>
                 <div class="flex items-start mt-2">
                    <input type="checkbox" id="clear_location" name="clear_location" value="true" class="h-4 w-4 text-blue-600 border-gray-300 rounded mt-0.5">
                    <label for="clear_location" class="ml-2 block text-sm text-gray-700">Clear existing location coordinates</label>
                </div>
             </fieldset>

            <div class="mt-6 pt-5 border-t border-gray-200 flex justify-end">
                <a href="/warehouses" class="px-4 py-2 border border-gray-300 text-sm font-medium text-gray-700 rounded-md hover:bg-gray-50 mr-3">Cancel</a>
                <button type="submit" class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700">
                    <%= isEditing ? 'Update Warehouse' : 'Add Warehouse' %>
                </button>
            </div>
        </form>
    </div>
</section>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= typeof googleMapsApiKey !== 'undefined' && googleMapsApiKey ? googleMapsApiKey : '' %>&libraries=places,marker&callback=initializeGoogleMap" async defer></script>

<script>
    let map;
    let marker;
    let autocomplete;
    let infoWindow;

    // Correctly get elements by their actual IDs from your form
    const latitudeInput = document.getElementById('coordinates_lat'); 
    const longitudeInput = document.getElementById('coordinates_lng');
    const addressInputForMap = document.getElementById('address_full'); // Use the general address field for map display
    const searchInput = document.getElementById('address-search');
    const useCurrentLocationButton = document.getElementById('use-current-location');
    const geolocationStatusDiv = document.getElementById('geolocation-status');
    const mapDiv = document.getElementById('map');

    const initialLat = parseFloat(latitudeInput.value) || 12.9716; 
    const initialLng = parseFloat(longitudeInput.value) || 77.5946;
    const initialZoom = (latitudeInput.value && longitudeInput.value) ? 16 : 10;

    const defaultLocation = { lat: initialLat, lng: initialLng };

    async function initializeGoogleMap() {
        if (!mapDiv) {
            console.error("Map div not found!");
            if (loader) loader.style.display = 'none';
            return;
        }
        if (!google || !google.maps || !google.maps.places) {
            console.error("Google Maps Places library not loaded. Check API key and libraries parameter.");
            mapDiv.innerHTML = '<p class="text-red-500 p-4 text-center">Could not load map. Check API Key configuration.</p>';
             if (loader) loader.style.display = 'none';
            return;
        }

        try {
            const { Map } = await google.maps.importLibrary("maps");
            const { AdvancedMarkerElement } = await google.maps.importLibrary("marker"); // Corrected: Marker library for AdvancedMarkerElement
            // const { InfoWindow } = await google.maps.importLibrary("maps"); // Already part of "maps"
            infoWindow = new google.maps.InfoWindow();


            map = new Map(mapDiv, {
                center: defaultLocation,
                zoom: initialZoom,
                mapId: "WAREHOUSE_MAP_ID_FORM", 
                mapTypeControl: false
            });

            autocomplete = new google.maps.places.Autocomplete(searchInput, {
                fields: ["formatted_address", "geometry", "name"],
                componentRestrictions: { country: "in" } // Bias to India
            });
            autocomplete.bindTo("bounds", map);

            marker = new AdvancedMarkerElement({
                map: map,
                position: (latitudeInput.value && longitudeInput.value) ? defaultLocation : null,
                gmpDraggable: true,
            });

            autocomplete.addListener("place_changed", () => {
                const place = autocomplete.getPlace();
                if (!place.geometry || !place.geometry.location) return;
                if (place.geometry.viewport) map.fitBounds(place.geometry.viewport);
                else { map.setCenter(place.geometry.location); map.setZoom(17); }
                updateLocationInputsAndMarker(place.geometry.location.lat(), place.geometry.location.lng(), place.formatted_address, false);
            });

            map.addListener("click", (e) => {
                if (e.latLng) updateLocationInputsAndMarker(e.latLng.lat(), e.latLng.lng(), null, true);
            });

            marker.addListener('dragend', () => {
                if (marker.position) updateLocationInputsAndMarker(marker.position.lat, marker.position.lng, null, true);
            });
            
            // If editing and coordinates exist, set initial marker and info window
            if (isEditing && latitudeInput.value && longitudeInput.value) {
                updateLocationInputsAndMarker(initialLat, initialLng, addressInputForMap.value || null, !addressInputForMap.value);
            }

        } catch(error) {
             console.error("Error during Google Maps initialization in form:", error);
             if (mapDiv) mapDiv.innerHTML = '<p class="text-red-500 p-4 text-center">Error initializing map features.</p>';
        }
    }

    function updateLocationInputsAndMarker(lat, lng, prefilledAddress = null, fetchAddressIfNeeded = false) {
         if (isNaN(lat) || isNaN(lng)) return;
         const newPosition = { lat: parseFloat(lat), lng: parseFloat(lng) };

         if (latitudeInput) latitudeInput.value = newPosition.lat.toFixed(7);
         if (longitudeInput) longitudeInput.value = newPosition.lng.toFixed(7);
         
         if (marker) { marker.position = newPosition; marker.map = map; }
         if (map) { map.setCenter(newPosition); if(map.getZoom() < 15) map.setZoom(15); }

        let addressToDisplay = prefilledAddress;
        
        function setInfoWindowContent(address) {
            if (!infoWindow) return;
            if (address) {
                infoWindow.setContent(`<div style="font-size:0.8rem; padding:5px;">${address}<br><small>Lat: ${newPosition.lat.toFixed(5)}, Lng: ${newPosition.lng.toFixed(5)}</small></div>`);
                infoWindow.open(map, marker);
            } else {
                infoWindow.close();
            }
        }

        if (fetchAddressIfNeeded && !prefilledAddress) {
            if (geolocationStatusDiv) geolocationStatusDiv.textContent = 'Getting address...';
             // Ensure you have a backend route /api/geocode/reverse or similar that uses Google Geocoding API
             fetch(`/api/geocode/reverse?lat=${newPosition.lat}&lng=${newPosition.lng}`) 
                 .then(response => response.json())
                 .then(data => {
                     if (data.address) {
                         addressToDisplay = data.address;
                         if (addressInputForMap) addressInputForMap.value = addressToDisplay;
                         if (geolocationStatusDiv) geolocationStatusDiv.textContent = 'Address found.';
                     } else {
                         if (geolocationStatusDiv) geolocationStatusDiv.textContent = 'Address not found for coordinates.';
                     }
                     setInfoWindowContent(addressToDisplay);
                 })
                 .catch(error => {
                     console.error('Reverse geocode error:', error);
                     if (geolocationStatusDiv) geolocationStatusDiv.textContent = 'Error getting address.';
                     setInfoWindowContent(null);
                 })
                 .finally(() => {
                     if (useCurrentLocationButton) useCurrentLocationButton.disabled = false;
                     setTimeout(() => { if(geolocationStatusDiv) geolocationStatusDiv.textContent = ''; }, 5000);
                 });
        } else {
            if(prefilledAddress && addressInputForMap) addressInputForMap.value = prefilledAddress;
            setInfoWindowContent(addressToDisplay);
        }
    }

    if (useCurrentLocationButton) {
        useCurrentLocationButton.addEventListener('click', () => {
            // ... (geolocation logic from previous response, calling updateLocationInputsAndMarker) ...
        });
    }
    if (searchInput) {
        searchInput.addEventListener('keydown', (event) => {
            if (event.key === 'Enter') { event.preventDefault(); }
        });
    }
</script>