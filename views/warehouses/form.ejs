<% locals.pageTitle = typeof title !== 'undefined' ? title : (isEditing ? 'Edit Warehouse' : 'Add New Warehouse'); %>
<% const isEditing = typeof warehouse !== 'undefined' && warehouse && warehouse._id; %>
<%# formData holds potentially invalid submitted data for repopulation %>
<% const currentFormData = typeof formData === 'object' && formData !== null ? formData : {}; %>
<%# warehouse holds the actual data for editing, or {} for new %>
<% const currentWarehouseData = typeof warehouse === 'object' && warehouse !== null ? warehouse : {}; %>
<%# companies list passed for admin role %>
<% const companyList = Array.isArray(companies) ? companies : []; %>

<header class="py-3 px-6 border-b border-gray-200 bg-white shadow-sm flex-shrink-0">
    <div class="flex items-center justify-between">
        <h2 class="text-lg font-semibold text-gray-800"><%= locals.pageTitle %></h2>
        <a href="/warehouses" class="inline-block px-3 py-1.5 border border-gray-300 text-xs font-medium text-gray-700 rounded-md hover:bg-gray-50">Cancel</a>
    </div>
</header>

<section class="p-6 flex-1 overflow-y-auto">
    <div class="max-w-3xl mx-auto">
        <% if (typeof error === 'string' && error && error.trim() !== '') { %>
            <div class="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md relative" role="alert">
                <strong class="font-bold">Error: </strong> <span class="block sm:inline"><%= error %></span>
            </div>
        <% } %>

        <form action="<%= isEditing ? '/warehouses/' + currentWarehouseData._id + '?_method=PUT' : '/warehouses' %>" method="POST" class="bg-white p-6 border rounded-lg shadow-sm space-y-5">

            <%# Company Selection for Admin Only on NEW form %>
            <% if (locals.loggedInUser.role === 'admin' && !isEditing) { %>
                <div>
                    <label for="companyId" class="block text-sm font-medium text-gray-700 mb-1">Assign to Company <span class="text-red-500">*</span></label>
                    <select id="companyId" name="companyId" required class="mt-1 block w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm sm:text-sm">
                        <option value="">-- Select Company --</option>
                        <% companyList.forEach(comp => { %>
                            <option value="<%= comp._id %>" <%= (currentFormData.companyId == comp._id) ? 'selected' : '' %>><%= comp.companyName %></option>
                        <% }); %>
                    </select>
                     <p class="mt-1 text-xs text-gray-500">Select the company this warehouse belongs to.</p>
                </div>
            <% } else if (isEditing && currentWarehouseData.companyId) { %>
                 <%# Display company name, cannot change %>
                 <div>
                     <label class="block text-sm font-medium text-gray-500 mb-1">Company</label>
                     <p class="mt-1 text-sm text-gray-800 bg-gray-100 px-3 py-2 border rounded-md"><%= currentWarehouseData.companyId?.companyName || '(Not Set)' %></p>
                     <input type="hidden" name="companyId" value="<%= currentWarehouseData.companyId?._id %>">
                 </div>
            <% } %>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-5">
                <div>
                    <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Warehouse Name <span class="text-red-500">*</span></label>
                    <input type="text" id="name" name="name" 
                           value="<%= typeof currentFormData.name !== 'undefined' ? currentFormData.name : (currentWarehouseData.name || '') %>" 
                           required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md sm:text-sm">
                </div>
                 <div>
                    <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
                    <input type="tel" id="phone" name="phone" 
                           value="<%= typeof currentFormData.phone !== 'undefined' ? currentFormData.phone : (currentWarehouseData.phone || '') %>" 
                           class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md sm:text-sm">
                </div>
            </div>

             <div>
                <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                <input type="email" id="email" name="email" 
                       value="<%= typeof currentFormData.email !== 'undefined' ? currentFormData.email : (currentWarehouseData.email || '') %>" 
                       class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md sm:text-sm">
            </div>

            <fieldset class="border p-3 rounded">
                <legend class="text-sm font-medium px-1">Warehouse Address</legend>
                <div class="space-y-3 mt-2">
                    <div>
                        <label for="address_street" class="block text-xs font-medium text-gray-700 mb-1">Street Address <span class="text-red-500">*</span></label>
                        <input type="text" id="address_street" name="address_street" required 
                               value="<%= typeof currentFormData.address_street !== 'undefined' ? currentFormData.address_street : (currentWarehouseData.address?.street || '') %>" 
                               class="block w-full px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm">
                    </div>
                    <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
                        <div>
                            <label for="address_city" class="block text-xs font-medium text-gray-700 mb-1">City <span class="text-red-500">*</span></label>
                            <input type="text" id="address_city" name="address_city" required 
                                   value="<%= typeof currentFormData.address_city !== 'undefined' ? currentFormData.address_city : (currentWarehouseData.address?.city || '') %>" 
                                   class="block w-full px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm">
                        </div>
                         <div>
                            <label for="address_state" class="block text-xs font-medium text-gray-700 mb-1">State <span class="text-red-500">*</span></label>
                            <input type="text" id="address_state" name="address_state" required 
                                   value="<%= typeof currentFormData.address_state !== 'undefined' ? currentFormData.address_state : (currentWarehouseData.address?.state || '') %>" 
                                   class="block w-full px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm">
                        </div>
                         <div>
                            <label for="address_pincode" class="block text-xs font-medium text-gray-700 mb-1">Pincode <span class="text-red-500">*</span></label>
                            <input type="text" id="address_pincode" name="address_pincode" required 
                                   value="<%= typeof currentFormData.address_pincode !== 'undefined' ? currentFormData.address_pincode : (currentWarehouseData.address?.pincode || '') %>" 
                                   class="block w-full px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm">
                        </div>
                    </div>
                     <div>
                        <label for="address_country" class="block text-xs font-medium text-gray-700 mb-1">Country</label>
                         <input type="text" id="address_country" name="address_country" 
                               value="<%= typeof currentFormData.address_country !== 'undefined' ? currentFormData.address_country : (currentWarehouseData.address?.country || 'India') %>" 
                               class="block w-full max-w-xs px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm">
                    </div>
                </div>
            </fieldset>

            <fieldset class="border p-3 rounded">
                 <legend class="text-sm font-medium px-1">Warehouse Location (Optional)</legend>
                 <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mt-2">
                        <div>
                            <label for="coordinates_lat" class="block text-xs font-medium text-gray-700 mb-1">Latitude</label>
                            <input type="number" step="any" id="coordinates_lat" name="coordinates_lat" 
                                   value="<%= typeof currentFormData.coordinates_lat !== 'undefined' ? currentFormData.coordinates_lat : (currentWarehouseData.location?.coordinates?.[1] || '') %>" 
                                   placeholder="e.g., 12.9716"
                                   class="block w-full px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm">
                        </div>
                        <div>
                            <label for="coordinates_lng" class="block text-xs font-medium text-gray-700 mb-1">Longitude</label>
                            <input type="number" step="any" id="coordinates_lng" name="coordinates_lng" 
                                   value="<%= typeof currentFormData.coordinates_lng !== 'undefined' ? currentFormData.coordinates_lng : (currentWarehouseData.location?.coordinates?.[0] || '') %>" 
                                   placeholder="e.g., 77.5946"
                                   class="block w-full px-3 py-1.5 border border-gray-300 rounded-md sm:text-sm">
                        </div>
                 </div>
                  <p class="mt-2 text-xs text-gray-500">Enter precise coordinates if available for map features.</p>
            </fieldset>


            <div class="mt-6 pt-5 border-t border-gray-200 flex justify-end">
                <a href="/warehouses" class="px-4 py-2 border border-gray-300 text-sm font-medium text-gray-700 rounded-md hover:bg-gray-50 mr-3">Cancel</a>
                <button type="submit" class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <%= isEditing ? 'Update Warehouse' : 'Add Warehouse' %>
                </button>
            </div>
        </form>
    </div>
</section>

<%# -------- Google Maps Script -------- %>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= typeof googleMapsApiKey !== 'undefined' ? googleMapsApiKey : '' %>&libraries=places,marker&callback=initializeGoogleMap" async defer></script>

<script>
    // --- COMPLETE Google Maps JavaScript block ---
    let map;
    let marker;
    let autocomplete;
    let infoWindow;

    const latitudeInput = document.getElementById('latitude');
    const longitudeInput = document.getElementById('longitude');
    const addressInput = document.getElementById('address');
    const searchInput = document.getElementById('address-search');
    const useCurrentLocationButton = document.getElementById('use-current-location');
    const geolocationStatusDiv = document.getElementById('geolocation-status');

    // Use coordinates from existing warehouse data if editing, otherwise use default
    const initialLat = parseFloat(latitudeInput.value) || 12.9716; // Default Bangalore Lat
    const initialLng = parseFloat(longitudeInput.value) || 77.5946; // Default Bangalore Lng
    const initialZoom = (latitudeInput.value && longitudeInput.value) ? 16 : 12; // Zoom in if coords exist

    const defaultLocation = { lat: initialLat, lng: initialLng };


    async function initializeGoogleMap() {
        try {
            const { Map } = await google.maps.importLibrary("maps");
            const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
            const { InfoWindow } = await google.maps.importLibrary("maps");
            console.log("Google Maps Libraries Loaded");

            map = new Map(document.getElementById("map"), {
                center: defaultLocation,
                zoom: initialZoom,
                mapId: "WAREHOUSE_MAP_ID", // Optional
                mapTypeControl: false
            });
            console.log("Map Initialized");

            infoWindow = new InfoWindow();
            console.log("InfoWindow Initialized");

            autocomplete = new google.maps.places.Autocomplete(searchInput, {
                 fields: ["formatted_address", "geometry", "name"],
                 componentRestrictions: { country: "in" }
            });
            autocomplete.bindTo("bounds", map);
            console.log("Autocomplete Initialized");

            marker = new AdvancedMarkerElement({
                 map: map,
                 position: (latitudeInput.value && longitudeInput.value) ? defaultLocation : null, // Set initial marker if editing
                 gmpDraggable: true,
            });
            console.log("Marker Initialized");

            // --- Event Listeners ---
            autocomplete.addListener("place_changed", () => {
                 const place = autocomplete.getPlace();
                 if (!place.geometry || !place.geometry.location) { return; }
                 if (place.geometry.viewport) { map.fitBounds(place.geometry.viewport); }
                 else { map.setCenter(place.geometry.location); map.setZoom(17); }
                 updateLocation(place.geometry.location.lat(), place.geometry.location.lng(), place.formatted_address, false);
            });

            map.addListener("click", (e) => {
                 if (e.latLng) { updateLocation(e.latLng.lat(), e.latLng.lng(), null, true); }
            });

            marker.addListener('dragend', () => {
                 if (marker.position) { updateLocation(marker.position.lat, marker.position.lng, null, true); }
            });

            marker.addListener('click', () => {
                 const content = infoWindow.getContent();
                 if (content) { infoWindow.open({ map: map, anchor: marker }); }
            });

             // Set initial InfoWindow content if editing and address exists
             if (latitudeInput.value && longitudeInput.value && addressInput.value) {
                 updateLocation(initialLat, initialLng, addressInput.value, false);
             } else if (latitudeInput.value && longitudeInput.value) {
                 // If editing but no address saved, fetch it
                 updateLocation(initialLat, initialLng, null, true);
             }


        } catch(error) {
             console.error("Error during Google Maps initialization:", error);
             geolocationStatusDiv.textContent = 'Error loading map components.';
             geolocationStatusDiv.className = 'text-xs text-red-600 mt-1';
        }
    } // End of initializeGoogleMap


    function updateLocation(lat, lng, prefilledAddress = null, fetchAddressIfNeeded = false) {
         console.log("updateLocation called with:", { lat, lng, prefilledAddress, fetchAddressIfNeeded });
         if (isNaN(lat) || isNaN(lng)) { console.error("Invalid coords"); return; }

         const newPosition = { lat: lat, lng: lng };
         latitudeInput.value = lat.toFixed(7);
         longitudeInput.value = lng.toFixed(7);

         if (marker) { marker.position = newPosition; marker.map = map; }
         else { console.error("Marker not available!"); return; }

         if (map) { map.setCenter(newPosition); map.setZoom(17); }
         else { console.error("Map not available!"); }

        let addressToDisplay = prefilledAddress;
        function setInfoWindowContent(address) {
            console.log("Setting InfoWindow content to:", address);
            if (address && infoWindow) {
                infoWindow.setContent(`<div class="info-window-content">${address}</div>`);
            } else if (infoWindow) {
                infoWindow.close();
                infoWindow.setContent(null);
            }
        }

        if (fetchAddressIfNeeded && !prefilledAddress) {
             geolocationStatusDiv.textContent = 'Getting address...';
             geolocationStatusDiv.className = 'text-xs text-gray-500 mt-1';
             fetch(`/stores/api/google/reverse_geocode?lat=${lat}&lng=${lng}`) // Use stores proxy for now
                .then(response => {
                     if (!response.ok) { throw new Error(`HTTP error ${response.status}`); }
                     return response.json();
                 })
                .then(data => {
                    if (data.address) {
                        addressToDisplay = data.address;
                        addressInput.value = addressToDisplay;
                        geolocationStatusDiv.textContent = 'Address updated.';
                        geolocationStatusDiv.className = 'text-xs text-green-600 mt-1';
                    } else {
                        addressInput.value = '';
                        geolocationStatusDiv.textContent = 'Address not found.';
                        geolocationStatusDiv.className = 'text-xs text-yellow-600 mt-1';
                    }
                    setInfoWindowContent(addressToDisplay);
                    setTimeout(() => { geolocationStatusDiv.textContent = ''; }, 5000);
                 })
                .catch(error => {
                    console.error('Reverse geocode fetch error:', error);
                    geolocationStatusDiv.textContent = `Error getting address: ${error.message}`;
                    geolocationStatusDiv.className = 'text-xs text-red-600 mt-1';
                    setInfoWindowContent(null);
                });
        } else {
             if(prefilledAddress) { addressInput.value = prefilledAddress; }
             setInfoWindowContent(addressToDisplay);
        }
    } // End of updateLocation


    useCurrentLocationButton.addEventListener('click', () => {
         if (!navigator.geolocation) {
            geolocationStatusDiv.textContent = 'Geolocation not supported.';
            geolocationStatusDiv.className = 'text-xs text-red-600 mt-1'; return;
         }
         geolocationStatusDiv.textContent = 'Getting location...';
         geolocationStatusDiv.className = 'text-xs text-gray-500 mt-1';
         useCurrentLocationButton.disabled = true;
         navigator.geolocation.getCurrentPosition(
            (position) => {
                 console.log("Geolocation Success:", position.coords);
                 useCurrentLocationButton.disabled = false;
                 updateLocation(position.coords.latitude, position.coords.longitude, null, true);
                 searchInput.value = '';
            },
            (error) => {
                 console.error("Geolocation Error:", error);
                 useCurrentLocationButton.disabled = false;
                 geolocationStatusDiv.className = 'text-xs text-red-600 mt-1';
                 switch(error.code) {
                     case error.PERMISSION_DENIED: geolocationStatusDiv.textContent = "Geolocation permission denied."; break;
                     case error.POSITION_UNAVAILABLE: geolocationStatusDiv.textContent = "Location unavailable."; break;
                     case error.TIMEOUT: geolocationStatusDiv.textContent = "Location request timed out."; break;
                     default: geolocationStatusDiv.textContent = "Unknown location error."; break;
                 }
            },
            { enableHighAccuracy: true, timeout: 15000, maximumAge: 0 }
         );
    });

    searchInput.addEventListener('keydown', (event) => {
         if (event.key === 'Enter') { event.preventDefault(); }
    });

</script>